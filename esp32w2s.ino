/*                          \\\|///
                          \\  - -  //
                           (  @ @  )
  /----------------------oOOo-(_)-oOOo-----------------------\
  |  ____      ____    _____     ______              _____   |  
  | |_  _|    |_  _|  / ___ `. .' ____ \            / ___ `. |
  |   \ \  /\  / /   |_/___) | | (___ \_|  _   __  |_/___) | |
  |    \ \/  \/ /     .'____.'  _.____`.  [ \ [  ]  .'____.' |
  |     \  /\  /     / /_____  | \____) |  \ \/ /  / /_____  |
  |      \/  \/      |_______|  \______.'   \__/   |_______| |
  |                               Oooo                       | 
  \----------------------oooO----(   )-----------------------/
                         (   )    ) /
                          \ (    (_/                                                         
                           \_)                            */
/******************************************************************************************************
*
*                                           Watch For Women Safety(w2s)
*
*                      
*                                   SOS watch which is used to share location
*
*
*                       Consider Subcribing To My YouTube Channel(https://bit.ly/2OVPERM)
********************************************************************************************************/                                       
#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <BlynkSimpleTinyGSM_M.h>
#include <BlynkSimpleEsp32_GSM_WF.h>
#include <TimeLib.h>
#include <WidgetRTC.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EasyButton.h>
#include <Adafruit_BMP280.h>
#include <MPU6050_tockn.h>
#include<math.h>

#define ssid  "hotspot_name"
#define pass  "hotspot_password"
#define wifi_blynk_tok   "Wifi auth code"
#define gsm_blynk_tok    "GSM auth code"
#define blynk_server     "blynk-cloud.com"
#define apn         "airtelgprs.com"
#define gprsUser    "guest"
#define gprsPass    "guest"

String Contact1 = "HOME";
String Contact2 = "person_1_name";
String Contact3 = "person_2_name";

#define Contact1_Number "+91xxxxxxxxxx"
#define Contact2_Number "+91xxxxxxxxxx"
#define Contact3_Number "+91xxxxxxxxxx"

String Message1 = "Sharing    location";
String Message2 = "Need help";
String Message3 = "Somebody  following";
String Message4 = "EMERGENCY";

#define BLYNK_HARDWARE_PORT       8080
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23

#define MODEM_TX             17
#define MODEM_RX             16
#define SerialAT  Serial1
TinyGsm modem(SerialAT);

#define OLED_RESET -1
Adafruit_SSD1306 display(OLED_RESET);

BlynkTimer timer;
WidgetRTC rtc;
WidgetBridge bridge1(V10);

#define BUTTON_LEFT_PIN 32
#define BUTTON_CENTER_PIN 33
#define BUTTON_RIGHT_PIN 25
#define Incoming_Ring_PIN 35

EasyButton Button_Left(BUTTON_LEFT_PIN);
EasyButton Button_Center(BUTTON_CENTER_PIN);
EasyButton Button_Right(BUTTON_RIGHT_PIN);
EasyButton Incoming(Incoming_Ring_PIN);

int Menu_Screen = 0;
int Total_Menu = 7;
bool On_Menu_Screen = false;

Adafruit_BMP280 bmp;
int Weather_Screen_Update = 0;
long int Weather_Screen_Update_Timer = millis();

MPU6050 mpu6050(Wire);
int steps = 0;
float distanceinonestep = 71;
float distance;
float vectorprevious;
float vector;
float totalvector;
int Steps = 0;

char LAT[50];
char LON[50];
float GSM_Lat = 0;
float GSM_Lon = 0;
float GSM_Accuracy = 0;
int GSM_Year = 0;
int GSM_Month = 0;
int GSM_Day = 0;
int GSM_Hour = 0;
int GSM_Min  = 0;
int GSM_Sec = 0;
int Point_Index = 0;

long int Battery_Calculation_Timer = millis();
long int Wifi_Reconnect_Timer = millis();
long int Tower_Calculation_Timer = millis();
long int Network_Connection_Timer = millis();
long int GSM_Location_Upload_Timer = millis();
long int Location_Get = millis();
long int GSM_Battery_Timer = millis();
long int Screen_Off_Timer = millis();

byte clockCenterX = 31;
byte clockCenterY = 31;

#define Battery_Adc_Pin 34
float Battery_Voltage = 0;
long int Battery_Adc = 0;
float Battery_Temp = 0.0;
float Battery_ADC_R1 = 33000.0;
float Battery_ADC_R2 = 8100.0;
int Battery_Percentage = 0;

int csq = 0;
bool GSM_CONNECT_OK = false;
bool On_Call = false;
bool Cut_Call = false;
bool Message_Selection = false;
bool Emergency_Status = false;
bool Trigger_SMS = false;
int Contact_Arrow = 0;
int Total_Contact = 3;
int Message_Arrow = 0;
int Total_Message = 3;

bool Phone_Contact_Selection = false;
bool SMS_Contact_Selection = false;
bool SMS_Message_Selection = false;
bool Incoming_State = false;
bool Attend_Incoming_call = false;
bool Reject_Incoming_Call = false;
bool Incoming_Call_Connected = false;
bool Sleep_Status = false;

void Battery_Voltage_Measure()
{
  Battery_Adc = analogRead(Battery_Adc_Pin);
  Battery_Temp = (Battery_Adc * 3.3) / 4096.0;
  Battery_Voltage = Battery_Temp / (Battery_ADC_R2 / (Battery_ADC_R1 + Battery_ADC_R2));
  Battery_Percentage = map(int(Battery_Voltage * 100), 360, 420, 0, 100);
}

BLYNK_CONNECTED() {
  rtc.begin();
  Blynk_WF.syncVirtual(V1);
  if (GSM_CONNECT_OK)
  {
    bridge1.setAuthToken(wifi_blynk_tok);
  }
}

BLYNK_WRITE(V1) {
  GpsParam gps(param);
  sprintf(LAT, "%.7f", gps.getLat());
  sprintf(LON, "%.7f", gps.getLon());
}

void Get_Gsm_Location()
{
  if (millis() - Location_Get > 60000);
  {
    Serial.println("Requesting current GSM location");
    modem.getGsmLocation(&GSM_Lon, &GSM_Lat, &GSM_Accuracy, &GSM_Year, &GSM_Month, &GSM_Day, &GSM_Hour, &GSM_Min, &GSM_Sec);
    Serial.println("Latitude:"); Serial.print(String(GSM_Lat, 8));
    Serial.println( "\tLongitude:"); Serial.print(String(GSM_Lon, 8));
    Serial.println("Accuracy:"); Serial.print(GSM_Accuracy);
    Location_Get = millis();
  }
}
/*****************************************************************************/
/****                       HOME LOG BITMAP                               ****/
/*****************************************************************************/

const unsigned char Home_Menu_Screen [] PROGMEM = {
  // 'home', 65x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xfe, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x03, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc3, 0xf8, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x3f, 0xf3,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8,
  0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xe0, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x01, 0xff, 0xf8, 0x00, 0x00,
  0x00, 0x01, 0xff, 0x80, 0x80, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0x01, 0xc0, 0x7f, 0xf8,
  0x00, 0x00, 0x00, 0x07, 0xfe, 0x03, 0xe0, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0xf0,
  0x1f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x0f, 0xf8, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xf0,
  0x1f, 0xfc, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x3f, 0xfe, 0x03, 0xff, 0x00, 0x00, 0x00,
  0xff, 0xc0, 0x7f, 0xff, 0x01, 0xff, 0x80, 0x00, 0x01, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xc0,
  0x00, 0x03, 0xff, 0x01, 0xff, 0xff, 0xc0, 0x7f, 0xe0, 0x00, 0x07, 0xfe, 0x03, 0xff, 0xff, 0xe0,
  0x3f, 0xf0, 0x00, 0x0f, 0xfc, 0x07, 0xff, 0xff, 0xf0, 0x1f, 0xf8, 0x00, 0x1f, 0xf8, 0x0f, 0xff,
  0xff, 0xf8, 0x0f, 0xfc, 0x00, 0x1f, 0xf0, 0x1f, 0xff, 0xff, 0xfc, 0x07, 0xfc, 0x00, 0x3f, 0xe0,
  0x3f, 0xff, 0xff, 0xfe, 0x03, 0xfe, 0x00, 0x3f, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0x01, 0xfc, 0x00,
  0x1f, 0x80, 0xff, 0xff, 0xff, 0xff, 0x80, 0xfc, 0x00, 0x0f, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0x78, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff,
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
  0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0,
  0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f,
  0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03,
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff,
  0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00,
  0x1f, 0xff, 0xe0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x03, 0xff, 0xf8, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x03, 0xff,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                  SATELLITE LOG BITMAP                               ****/
/*****************************************************************************/

const unsigned char Location_Menu_Screen [] PROGMEM = {
  // 'satellite-512', 60x58px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7f, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9f, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe6, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x9f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcf, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xe7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0f, 0xf3, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x3e, 0x1f, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xfc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x39, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xc7, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3e, 0x67, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x39, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0x98, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xcc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xe6, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf3, 0xe3, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x79, 0xff, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7e, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x01, 0xfe, 0x3c, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0xff, 0x18, 0x00, 0xc0, 0x00, 0x00,
  0x00, 0x03, 0xff, 0x98, 0x00, 0x80, 0x00, 0x00, 0x00, 0x09, 0xff, 0x90, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0xff, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x7e, 0x20, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0x3c, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xff, 0x98, 0x20, 0x1e, 0x00, 0x00, 0x00,
  0x01, 0xff, 0xc0, 0x30, 0x37, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x10, 0x43, 0xc0, 0x00, 0x00,
  0x06, 0x7f, 0xc0, 0x11, 0x83, 0xc0, 0x00, 0x00, 0x0f, 0x3f, 0x80, 0x0f, 0x03, 0xc1, 0x08, 0xc0,
  0x1f, 0x9f, 0x00, 0x00, 0x01, 0xc3, 0x18, 0xc0, 0x3f, 0xce, 0x00, 0x00, 0x00, 0x02, 0x18, 0xc0,
  0x7f, 0xe0, 0x00, 0x00, 0x00, 0x06, 0x10, 0x80, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x80,
  0x3f, 0xf0, 0x00, 0x00, 0x00, 0x38, 0x21, 0x80, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x61, 0x00,
  0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x01, 0x82, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00
};

/*****************************************************************************/
/****                        STEP LOG BITMAP                              ****/
/*****************************************************************************/

const unsigned char Steps_Menu_Screen [] PROGMEM = {
  // 'foot-steps', 50x50px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff,
  0x01, 0xff, 0xff, 0x00, 0x00, 0x03, 0xff, 0x81, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xc1, 0xff,
  0xff, 0x00, 0x00, 0x1f, 0xff, 0xe1, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0xff, 0xff, 0x00,
  0x00, 0x3f, 0xff, 0xe0, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 0x7f,
  0xff, 0xf0, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xe0,
  0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xe1, 0xff, 0xf0,
  0x00, 0x01, 0xff, 0xff, 0xc1, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xc3, 0xff, 0xc0, 0x00, 0x01,
  0xff, 0xff, 0x83, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0x01, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff,
  0x00, 0x7f, 0x80, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x18, 0x03,
  0x00, 0x00, 0x03, 0xff, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x1f, 0xe0, 0x00, 0x00,
  0x07, 0xff, 0xc0, 0x3f, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x3f, 0xfc, 0x00, 0x00, 0x07, 0xff,
  0x80, 0x3f, 0xfc, 0x00, 0x00, 0x01, 0xff, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x1f,
  0xf8, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x0f, 0xe0, 0x00,
  0x00, 0x3f, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                  WEATHER LOG BITMAP                                 ****/
/*****************************************************************************/

const unsigned char Weather_Menu_Screen [] PROGMEM = {
  // 'Weather', 62x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x1c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x1f, 0x80, 0x0f, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0x7f, 0xe0, 0x3f, 0xf0, 0x00, 0x00,
  0x01, 0xf1, 0xff, 0xf0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xe3, 0xe0, 0xf9, 0xf0, 0x3e, 0x00, 0x00,
  0x00, 0x23, 0x80, 0x3f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x80, 0x07, 0x80, 0x00,
  0x00, 0x07, 0x00, 0x0f, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x01, 0xc0, 0x00,
  0x00, 0x0e, 0x01, 0xfe, 0x00, 0x00, 0xe0, 0x00, 0x07, 0x8e, 0x07, 0xfc, 0x00, 0x00, 0xe0, 0x00,
  0x07, 0x8e, 0x0f, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x1e, 0x00, 0x00, 0x00, 0x60, 0x00,
  0x00, 0x0e, 0x1c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x07, 0x38, 0x00, 0x00, 0x00, 0x78, 0x00,
  0x00, 0x07, 0xb8, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x63, 0xf0, 0x00, 0x00, 0x00, 0x1e, 0x00,
  0x01, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x01, 0x83, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x1e, 0x00,
  0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x71, 0xc6, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x8e, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xe3, 0x8e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x1c, 0x70, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xc7, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x38, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x8e, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8c, 0x71, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0x1c, 0x71, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                         PHONE LOG BITMAP                            ****/
/*****************************************************************************/

const unsigned char Phone_Menu_Screen [] PROGMEM = {
  // 'Phone(1)', 79x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00,
  0x7f, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x07, 0xff,
  0xfe, 0x01, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xf8, 0x03, 0xff, 0xff, 0x80, 0x7f,
  0xff, 0xe0, 0x1f, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xf0, 0x3f, 0xff, 0xfc, 0x07,
  0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf8, 0x3f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xf8,
  0x3f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xfe, 0x0f, 0xff, 0xff,
  0xe0, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xf8, 0x1f, 0xff,
  0xe0, 0x3f, 0x80, 0x03, 0xf8, 0x0f, 0xff, 0xf8, 0x1f, 0xff, 0x80, 0xfe, 0x00, 0x00, 0xfe, 0x03,
  0xff, 0xf0, 0x0f, 0xfe, 0x01, 0xfc, 0x0c, 0x60, 0x3f, 0x00, 0xff, 0xe0, 0x0f, 0xf8, 0x07, 0xf0,
  0x0e, 0x60, 0x1f, 0x80, 0x3f, 0xe0, 0x07, 0xe0, 0x0f, 0xe0, 0x0d, 0x40, 0x0f, 0xc0, 0x0f, 0xe0,
  0x07, 0x80, 0x1f, 0xe1, 0x8f, 0xe3, 0x07, 0xe0, 0x03, 0xc0, 0x02, 0x00, 0x1f, 0xc1, 0xbf, 0xf3,
  0x07, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xf8, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xc0, 0x7f, 0xf8, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc4, 0x7f, 0xf8, 0x43, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xce, 0x7f, 0xf8, 0xe3, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xce,
  0x3f, 0xf8, 0xe7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x1f, 0xf0, 0x07, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0xe0, 0x0f, 0xe0, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x20, 0x08,
  0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x70, 0x1c, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xfc, 0x60, 0x08, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x01, 0x80, 0xff, 0xfe,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc1, 0x87, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                       MESSAGE LOG BITMAP                            ****/
/*****************************************************************************/

const unsigned char Message_Menu_Screen [] PROGMEM = {
  // 'Message', 90x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x00, 0x00, 0x01,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x07, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e,
  0x00, 0x00, 0x00, 0x1f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x3c,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x07, 0x80, 0x00, 0x00, 0x78, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x03, 0xe0, 0x00, 0x01, 0xf0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
  0xf0, 0x00, 0x03, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x78, 0x00, 0x07, 0x80,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x3e, 0x00, 0x1f, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x00, 0x0f, 0x00, 0x3c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
  0x0f, 0x80, 0x7c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x1f, 0xe1, 0xff, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x38, 0xf3, 0xc7, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x00, 0x70, 0x7f, 0x83, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
  0xe0, 0x3f, 0x01, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x01, 0xc0, 0x0c, 0x00, 0xe0,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0e,
  0x00, 0x00, 0x00, 0x1c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x0e,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x20,
  0x00, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                     BATTERY LOG BITMAP                              ****/
/*****************************************************************************/

const unsigned char Battery_Menu_Screen [] PROGMEM = {
  // 'battery', 60x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xf8, 0x00, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xf8, 0x00,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x00, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x80, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xff, 0x00,
  0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xf8, 0x00, 0x1e, 0x3c, 0xf3, 0xcf, 0x3c, 0xf0, 0xf8, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*************************************************************************************************/
/****                               GSM LOG BITMAP                                            ****/
/*************************************************************************************************/

const unsigned char GSM_Location_Menu_Screen [] PROGMEM = {
  // 'cell-tower', 48x62px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x0f, 0x80,
  0x00, 0x00, 0x01, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x0f, 0x00, 0x00, 0xf0, 0xf8,
  0x3e, 0x0f, 0x80, 0x00, 0xf0, 0x7c, 0x3e, 0x1f, 0x00, 0x00, 0xf8, 0x7c, 0x3c, 0x3f, 0x01, 0x80,
  0xfc, 0x3c, 0x7c, 0x3e, 0x0f, 0xf0, 0x7c, 0x3e, 0x7c, 0x3c, 0x1f, 0xf8, 0x3c, 0x1e, 0x78, 0x7c,
  0x1f, 0xfc, 0x3e, 0x1e, 0x78, 0x7c, 0x3f, 0xfc, 0x3e, 0x1e, 0x78, 0x7c, 0x3f, 0xfe, 0x3e, 0x1e,
  0x78, 0x7c, 0x3f, 0xfe, 0x3e, 0x1e, 0x78, 0x7c, 0x3f, 0xfe, 0x3e, 0x1e, 0x78, 0x7c, 0x3f, 0xfc,
  0x3e, 0x1e, 0x78, 0x7c, 0x3f, 0xfc, 0x3e, 0x1e, 0x78, 0x3c, 0x1f, 0xf8, 0x3e, 0x1e, 0x7c, 0x3e,
  0x0f, 0xf0, 0x3c, 0x1e, 0x7c, 0x3e, 0x07, 0xe0, 0x7c, 0x3e, 0x3c, 0x1f, 0x07, 0xf0, 0xf8, 0x3c,
  0x3e, 0x1f, 0x0f, 0xf0, 0xf8, 0x7c, 0x1e, 0x0f, 0x8f, 0xf1, 0xf0, 0x7c, 0x1f, 0x07, 0x1f, 0xf8,
  0xe0, 0xf8, 0x0f, 0x80, 0x1e, 0x78, 0x00, 0xf8, 0x0f, 0x80, 0x3e, 0x7c, 0x01, 0xf0, 0x07, 0x80,
  0x3e, 0x7c, 0x01, 0xe0, 0x03, 0x80, 0x3c, 0x3e, 0x01, 0xe0, 0x00, 0x00, 0x7c, 0x3e, 0x00, 0x00,
  0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xef, 0x80, 0x00, 0x00, 0x01,
  0xff, 0x07, 0x80, 0x00, 0x00, 0x03, 0xfc, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x03, 0xc0, 0x00,
  0x00, 0x07, 0xff, 0xe3, 0xe0, 0x00, 0x00, 0x07, 0xcf, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0x83, 0xff,
  0xf0, 0x00, 0x00, 0x0f, 0x80, 0x7f, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f,
  0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x3e, 0x0f, 0xff, 0xfc, 0x00,
  0x00, 0x3e, 0xff, 0xfc, 0x3c, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x3e, 0x00, 0x00, 0x7f, 0xfc, 0x00,
  0x3e, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x1f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x1f, 0x00, 0x01, 0xf0,
  0x00, 0x00, 0x0f, 0x80, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x80,
  0x01, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                PRESSURE ICON BITMAP                                 ****/
/*****************************************************************************/

const unsigned char Pressure_Icon [] PROGMEM = {
  // 'pressure', 50x50px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x00,
  0x0f, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3e, 0x00,
  0xc0, 0x1f, 0x00, 0x00, 0x00, 0x7c, 0x00, 0xc0, 0x0f, 0x80, 0x00, 0x00, 0xf8, 0x20, 0xc1, 0x07,
  0xc0, 0x00, 0x01, 0xf0, 0x30, 0x03, 0x03, 0xe0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x01, 0xe0, 0x00,
  0x03, 0xe0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x03, 0xc6,
  0x00, 0x00, 0x18, 0xf0, 0x00, 0x07, 0x82, 0x08, 0x00, 0x10, 0x78, 0x00, 0x07, 0x80, 0x0c, 0x00,
  0x00, 0x78, 0x00, 0x07, 0x80, 0x0e, 0x00, 0x00, 0x78, 0x00, 0x07, 0x80, 0x06, 0x00, 0x00, 0x78,
  0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x38, 0x00, 0x07, 0x1c, 0x07, 0x80, 0x0e, 0x38, 0x00, 0x07,
  0x1c, 0x07, 0xe0, 0x0e, 0x38, 0x00, 0x07, 0x00, 0x03, 0xf0, 0x00, 0x38, 0x00, 0x07, 0x80, 0x07,
  0xf8, 0x00, 0x78, 0x00, 0x07, 0x80, 0x07, 0xf8, 0x00, 0x78, 0x00, 0x07, 0x8f, 0xe7, 0xf9, 0xfc,
  0x78, 0x00, 0x07, 0x8f, 0xe3, 0xf1, 0xfc, 0x78, 0x00, 0x03, 0xcf, 0xe1, 0xe1, 0xfc, 0xf8, 0x00,
  0x03, 0xc7, 0xf0, 0x03, 0xf8, 0xf0, 0x00, 0x03, 0xe3, 0xf8, 0x07, 0xf1, 0xf0, 0x00, 0x01, 0xe3,
  0xfe, 0x1f, 0xf1, 0xe0, 0x00, 0x01, 0xf0, 0xff, 0xff, 0xe3, 0xe0, 0x00, 0x00, 0xf8, 0x7f, 0xff,
  0x87, 0xc0, 0x00, 0x00, 0x7c, 0x3f, 0xff, 0x0f, 0x80, 0x00, 0x00, 0x3e, 0x07, 0xf8, 0x1f, 0x00,
  0x00, 0x00, 0x3f, 0x80, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x01, 0xfc, 0x00, 0x00, 0x00,
  0x07, 0xfe, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                 TEMPERATURE ICON BITMAP                             ****/
/*****************************************************************************/

const unsigned char Temperature_Icon [] PROGMEM = {
  // 'Temperature', 50x50px
  0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x80, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x00, 0x80, 0x00,
  0x00, 0x00, 0x0f, 0x0c, 0x00, 0x80, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x06, 0x0c,
  0x78, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x78, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x0f,
  0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00,
  0x00, 0x00, 0x07, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x78, 0x80, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x78, 0x80,
  0x00, 0x00, 0x00, 0x07, 0x0c, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x30, 0xfc, 0x70, 0x00, 0x00, 0x00, 0x00,
  0x73, 0xfe, 0x30, 0x00, 0x00, 0x00, 0x00, 0x67, 0xff, 0x38, 0x00, 0x00, 0x00, 0x00, 0x67, 0x7f,
  0x98, 0x00, 0x00, 0x00, 0x00, 0xce, 0x7f, 0x98, 0x00, 0x00, 0x00, 0x00, 0xce, 0x7f, 0x9c, 0x00,
  0x00, 0x00, 0x00, 0xce, 0x7f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0xce, 0xff, 0x9c, 0x00, 0x00, 0x00,
  0x00, 0xc7, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x67, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x63,
  0xff, 0x38, 0x00, 0x00, 0x00, 0x00, 0x71, 0xfe, 0x30, 0x00, 0x00, 0x00, 0x00, 0x38, 0xf8, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x03, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                        MOUNTAIN ICON BITMAP                         ****/
/*****************************************************************************/

const unsigned char Mountain_Icon [] PROGMEM = {
  // 'mountain', 50x50px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x61, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x38, 0xf1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xfb, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0x9f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x0e, 0x60, 0x00, 0x00, 0x00, 0x10, 0xc0, 0x00,
  0x70, 0x00, 0x00, 0x00, 0x39, 0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x38, 0x00,
  0x00, 0x00, 0x7f, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0xe2, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x01, 0x80, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03,
  0x30, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x1c, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                  CLOCK FRAME BITMAP                                 ****/
/*****************************************************************************/

const unsigned char Clock_Frame [] PROGMEM = {
  // 'Clock', 63x63px
  0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xe0, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x18, 0x70, 0x1e, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x28, 0x88, 0x07, 0x80, 0x00,
  0x00, 0x07, 0x00, 0x08, 0x08, 0x01, 0xc0, 0x00, 0x00, 0x1c, 0x00, 0x08, 0x10, 0x00, 0x70, 0x00,
  0x00, 0x38, 0x20, 0x08, 0x20, 0x10, 0x38, 0x00, 0x00, 0x70, 0x20, 0x08, 0x40, 0x10, 0x1c, 0x00,
  0x00, 0xe0, 0x10, 0x3e, 0xf8, 0x20, 0x0e, 0x00, 0x01, 0xc0, 0x10, 0x00, 0x00, 0x20, 0x07, 0x00,
  0x01, 0x80, 0x08, 0x00, 0x00, 0x40, 0x03, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x40, 0x01, 0x80,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38,
  0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x18, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  0xc7, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xc6, 0xc8, 0x80, 0x00, 0x07, 0xc0, 0x00, 0x02, 0x26,
  0xc8, 0x80, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x26, 0xc7, 0x80, 0x00, 0x0c, 0x60, 0x00, 0x00, 0xc6,
  0xc0, 0x80, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x26, 0xc1, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x02, 0x26,
  0xce, 0x00, 0x00, 0x03, 0x80, 0x00, 0x01, 0xc6, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x18, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x08, 0x00, 0x00, 0x20, 0x01, 0x80,
  0x01, 0x80, 0x08, 0x00, 0x00, 0x20, 0x03, 0x00, 0x01, 0xc0, 0x10, 0x00, 0x00, 0x10, 0x07, 0x00,
  0x00, 0xe0, 0x10, 0x03, 0x80, 0x10, 0x0e, 0x00, 0x00, 0x70, 0x20, 0x06, 0x00, 0x08, 0x1c, 0x00,
  0x00, 0x38, 0x20, 0x04, 0x00, 0x08, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x07, 0x80, 0x00, 0x70, 0x00,
  0x00, 0x07, 0x00, 0x04, 0x40, 0x01, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x04, 0x40, 0x07, 0x80, 0x00,
  0x00, 0x00, 0xf0, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xe0, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                    HOME SCREEN WIFI BITMAP                          ****/
/*****************************************************************************/

const unsigned char WIFI_4 [] PROGMEM = {
  // 'WIFI4', 13x10px
  0x07, 0x00, 0x3f, 0xe0, 0x40, 0x10, 0x9f, 0xc8, 0x20, 0x20, 0x4f, 0x90, 0x10, 0x40, 0x07, 0x00,
  0x02, 0x00, 0x02, 0x00
};

const unsigned char WIFI_3 [] PROGMEM = {
  // 'WIFI3', 13x10px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x20, 0x20, 0x4f, 0x90, 0x10, 0x40, 0x07, 0x00,
  0x02, 0x00, 0x02, 0x00
};

const unsigned char WIFI_2 [] PROGMEM = {
  // 'WIFI2', 13x10px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x10, 0x40, 0x07, 0x00,
  0x02, 0x00, 0x02, 0x00
};
const unsigned char WIFI_1 [] PROGMEM = {
  // 'WIFI1', 13x10px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x02, 0x00, 0x02, 0x00
};

/*****************************************************************************/
/****                      TOWER HOME BITMAP                               ****/
/*****************************************************************************/

const unsigned char TOWER_HOME [] PROGMEM = {
  // 'TOWER', 13x10px
  0x3f, 0xe0, 0x12, 0x40, 0x0a, 0x80, 0x07, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00,
  0x02, 0x00, 0x02, 0x00
};

/*****************************************************************************/
/****                       INTERNET ICON BITMAP                          ****/
/*****************************************************************************/

const unsigned char Internet_Icon [] PROGMEM = {
  // 'internet-icon', 64x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xfe, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7c, 0x3e, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0xfc, 0x78, 0x1e, 0x3f, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x78, 0x1e, 0x1f, 0x80, 0x00,
  0x00, 0x03, 0xf0, 0xf8, 0x0f, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0xf0, 0x0f, 0x03, 0xe0, 0x00,
  0x00, 0x0f, 0x80, 0xf0, 0x0f, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x01, 0xf0, 0x07, 0x80, 0xf0, 0x00,
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
  0x00, 0x7c, 0x03, 0xe0, 0x07, 0xc0, 0x1e, 0x00, 0x00, 0x78, 0x03, 0xc0, 0x03, 0xc0, 0x1e, 0x00,
  0x00, 0x78, 0x03, 0xc0, 0x03, 0xc0, 0x1e, 0x00, 0x00, 0xf8, 0x03, 0xc0, 0x03, 0xc0, 0x1f, 0x00,
  0x00, 0xf0, 0x03, 0xc0, 0x03, 0xc0, 0x0f, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x03, 0xc0, 0x0f, 0x00,
  0x00, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0x00,
  0x00, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0x00,
  0x00, 0xf0, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0xf8, 0x03, 0xc0, 0x30, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x03, 0xc0, 0x1e, 0x00, 0x06, 0x00,
  0x00, 0x78, 0x03, 0xc0, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x78, 0x03, 0xe0, 0x1f, 0xf8, 0x00, 0x00,
  0x00, 0x3f, 0xff, 0xfe, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x0f, 0xff, 0xf0, 0x00,
  0x00, 0x3f, 0xff, 0xff, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xff, 0xf0, 0x00,
  0x00, 0x0f, 0x01, 0xf0, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0x80, 0xf0, 0x03, 0xff, 0xc0, 0x00,
  0x00, 0x07, 0xc0, 0xf0, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0xf0, 0x01, 0xff, 0xe0, 0x00,
  0x00, 0x01, 0xf8, 0x78, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xfc, 0x78, 0x01, 0xff, 0xfc, 0x00,
  0x00, 0x00, 0x7f, 0x7c, 0x20, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x70, 0xf9, 0xff, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xf0, 0x70, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x70, 0x7c, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xf8, 0x60, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                WIFI ANIMATION BITMAP                                ****/
/*****************************************************************************/

const unsigned char WIFI_Icon_3 [] PROGMEM = {
  // 'WIFI_Icon_3', 113x64px
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3f, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x03, 0xf8, 0x06, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00,
  0x00, 0x00, 0x30, 0x0f, 0xe0, 0x00, 0x07, 0xf8, 0x07, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x70, 0x0f, 0xf0, 0x00, 0x07, 0xf0, 0x0f, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0xf8, 0x07, 0xf0, 0x00, 0x0f, 0xf0, 0x1f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfc,
  0x03, 0xf8, 0x00, 0x0f, 0xe0, 0x3f, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xfe, 0x03,
  0xf8, 0x00, 0x1f, 0xc0, 0x3f, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0x01, 0xfc,
  0x00, 0x1f, 0xc0, 0x7f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0x01, 0xfc, 0x00,
  0x1f, 0xc0, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x80, 0xfc, 0x00, 0x3f,
  0x80, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0x80, 0xfe, 0x00, 0x3f, 0x81,
  0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xf8, 0x1f, 0xc0, 0xfe, 0x00, 0x3f, 0x01, 0xfc,
  0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3c, 0x1f, 0xc0, 0x7e, 0x00, 0x7f, 0x01, 0xf8, 0x7f,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1e, 0x0f, 0xe0, 0x7f, 0x00, 0x7f, 0x03, 0xf8, 0x7f, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x0f, 0xe0, 0x7f, 0x00, 0x7e, 0x03, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x07, 0x0f, 0xe0, 0x3f, 0x00, 0x7e, 0x03, 0xf0, 0xff, 0xff, 0xff, 0x0f,
  0x80, 0xff, 0xc7, 0x03, 0x87, 0xf0, 0x3f, 0x00, 0x7e, 0x07, 0xf1, 0xf8, 0x60, 0xc3, 0x0f, 0x81,
  0xff, 0xef, 0x03, 0x87, 0xf0, 0x3f, 0x00, 0xfe, 0x07, 0xf1, 0xf8, 0x60, 0xc3, 0x0f, 0x81, 0xff,
  0xe7, 0x01, 0x87, 0xf0, 0x3f, 0x80, 0xfe, 0x07, 0xe1, 0xf8, 0x60, 0xc3, 0xff, 0x81, 0xff, 0xe0,
  0x01, 0xc3, 0xf0, 0x3f, 0x80, 0xfe, 0x07, 0xe1, 0xfc, 0x60, 0xc7, 0xff, 0x01, 0xe0, 0x00, 0x01,
  0xc3, 0xf0, 0x3f, 0x80, 0xfc, 0x07, 0xe1, 0xfc, 0x60, 0xc7, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3,
  0xf0, 0x1f, 0x80, 0xfc, 0x07, 0xe1, 0xfc, 0x60, 0x87, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf8,
  0x1f, 0x80, 0xfc, 0x0f, 0xe1, 0xfc, 0x00, 0x07, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf8, 0x1f,
  0x80, 0xfc, 0x0f, 0xe1, 0xfc, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x1f, 0x80,
  0xfc, 0x0f, 0xe1, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x1f, 0x80, 0xfc,
  0x07, 0xe1, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x1f, 0x80, 0xfc, 0x07,
  0xe1, 0xfe, 0x0c, 0x0f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x1f, 0x80, 0xfe, 0x07, 0xe1,
  0xfe, 0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x1f, 0x80, 0xfe, 0x07, 0xe1, 0xff,
  0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x3f, 0x80, 0xfe, 0x07, 0xf1, 0xff, 0x0e,
  0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0x87, 0xf0, 0x3f, 0x80, 0x7e, 0x07, 0xf1, 0xff, 0x0e, 0x1f,
  0x0f, 0x01, 0xe0, 0x07, 0x03, 0x87, 0xf0, 0x3f, 0x80, 0x7e, 0x07, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x03, 0x87, 0xf0, 0x3f, 0x00, 0x7e, 0x03, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x07, 0x07, 0xe0, 0x3f, 0x00, 0x7f, 0x03, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x0f, 0x0f, 0xe0, 0x7f, 0x00, 0x7f, 0x03, 0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x1e, 0x0f, 0xe0, 0x7f, 0x00, 0x3f, 0x01, 0xfc, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7c,
  0x1f, 0xc0, 0x7e, 0x00, 0x3f, 0x81, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f,
  0xc0, 0xfe, 0x00, 0x3f, 0x80, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0x80,
  0xfe, 0x00, 0x1f, 0x80, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x80, 0xfc,
  0x00, 0x1f, 0xc0, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0x01, 0xfc, 0x00,
  0x1f, 0xc0, 0x7f, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x01, 0xfc, 0x00, 0x0f,
  0xe0, 0x3f, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfe, 0x03, 0xf8, 0x00, 0x0f, 0xe0,
  0x1f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xfc, 0x03, 0xf8, 0x00, 0x07, 0xf0, 0x1f,
  0x80, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xfc, 0x07, 0xf0, 0x00, 0x07, 0xf8, 0x0f, 0x00,
  0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x78, 0x0f, 0xf0, 0x00, 0x03, 0xf8, 0x06, 0x00, 0x00,
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x30, 0x0f, 0xe0, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
  0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char WIFI_Icon_2 [] PROGMEM = {
  // 'WIFI_2', 113x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00,
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xfe, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x80, 0x00, 0x00, 0x00,
  0x00, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x01,
  0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xf8, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xfc,
  0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3c, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7f,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1e, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x7f, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x07, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf0, 0xff, 0xff, 0xff, 0x0f,
  0x80, 0xff, 0xc7, 0x03, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xf8, 0x60, 0xc3, 0x0f, 0x81,
  0xff, 0xef, 0x03, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xf8, 0x60, 0xc3, 0x0f, 0x81, 0xff,
  0xe7, 0x01, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xf8, 0x60, 0xc3, 0xff, 0x81, 0xff, 0xe0,
  0x01, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xfc, 0x60, 0xc7, 0xff, 0x01, 0xe0, 0x00, 0x01,
  0xc3, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xfc, 0x60, 0xc7, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3,
  0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xfc, 0x60, 0x87, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf8,
  0x00, 0x00, 0x00, 0x0f, 0xe1, 0xfc, 0x00, 0x07, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf8, 0x00,
  0x00, 0x00, 0x0f, 0xe1, 0xfc, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x00, 0x00,
  0x00, 0x0f, 0xe1, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x00, 0x00, 0x00,
  0x07, 0xe1, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc3, 0xf8, 0x00, 0x00, 0x00, 0x07,
  0xe1, 0xfe, 0x0c, 0x0f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1,
  0xfe, 0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xff,
  0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xff, 0x0e,
  0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf1, 0xff, 0x0e, 0x1f,
  0x0f, 0x01, 0xe0, 0x07, 0x03, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x03, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x07, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x0f, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x1e, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7c,
  0x1f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0x80,
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1f, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
  0x80, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char WIFI_Icon_1 [] PROGMEM = {
  // 'WIFI_1', 113x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0xc0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0f,
  0x80, 0xff, 0xc7, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x60, 0xc3, 0x0f, 0x81,
  0xff, 0xef, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x60, 0xc3, 0x0f, 0x81, 0xff,
  0xe7, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x60, 0xc3, 0xff, 0x81, 0xff, 0xe0,
  0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x60, 0xc7, 0xff, 0x01, 0xe0, 0x00, 0x01,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x60, 0xc7, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x60, 0x87, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x07, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xfc, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xfe, 0x04, 0x0f, 0x0f, 0x01, 0xff, 0xc7, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xfe, 0x0c, 0x0f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0xfe, 0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff,
  0x0e, 0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x0e,
  0x1f, 0x0f, 0x01, 0xe0, 0x07, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x0e, 0x1f,
  0x0f, 0x01, 0xe0, 0x07, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7c,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*****************************************************************************/
/****                         BUTTON CONTROL                              ****/
/*****************************************************************************/

void sequenceEllapsed()
{
  Serial.println("EMERGENCY");
  Emergency_Status = true;
}

void Button_Left_ISR()
{
  Button_Left.read();
}

void Button_Center_ISR()
{
  Button_Center.read();
}

void Button_Right_ISR()
{
  Button_Right.read();
}

void Incoming_ISR()
{
  Incoming.read();
  Serial.println("interupt");
  if (digitalRead(Incoming_Ring_PIN) == 0)
  {
    Incoming_State = true;
  }
  else
  {
    if (Incoming_Call_Connected == false)
    {
      Incoming_State = false;
      Attend_Incoming_call = false;
      Reject_Incoming_Call = false;
    }
  }
}

void Button_Left_Pressed()
{
  Serial.println("Button_Left_Pressed");
  Screen_Off_Timer = millis();
  if (Incoming_State == false)
  {
    if (On_Menu_Screen == true)
    {
      Menu_Screen--;
      if (Menu_Screen < 0)
      {
        Menu_Screen = Total_Menu;
      }

    }
    if (Phone_Contact_Selection == true)
    {
      Contact_Arrow--;
      if (Contact_Arrow < 0)
      {
        Contact_Arrow = Total_Contact;
      }
      Serial.println(Contact_Arrow);
    }
    if (SMS_Contact_Selection == true && SMS_Message_Selection == false)
    {
      Contact_Arrow--;
      if (Contact_Arrow < 0)
      {
        Contact_Arrow = Total_Contact;
      }
      Serial.println(Contact_Arrow);
    }
    else if (SMS_Contact_Selection == true && SMS_Message_Selection == true)
    {
      Message_Arrow--;
      if (Message_Arrow < 0)
      {
        Message_Arrow = Total_Message;
      }
      Serial.println(Message_Arrow);
    }

    Serial.println(Menu_Screen);
  }
  else
  {
    Attend_Incoming_call = true;
  }

}

void Button_Center_Pressed()
{
  Serial.println("Button_Center_Pressed");

  if (Incoming_State == false)
  {
    if (On_Call == false)
    {
      if (Sleep_Status == false)
      {
        if (On_Menu_Screen == false)
        {
          On_Menu_Screen = true;
          Serial.println("On_Menu_Screen");

        }
        else
        {
          On_Menu_Screen = false;
          Serial.println("Inside_Menu_Screen");
        }
        Screen_Off_Timer = millis();
      }
      else
      {
        Sleep_Status = false;
        Screen_Off_Timer = millis();
      }

      if (Phone_Contact_Selection == true && Contact_Arrow == Total_Contact)
      {
        On_Menu_Screen = true;
        Phone_Contact_Selection = false;
        Contact_Arrow = 0;
      }
      else if (Phone_Contact_Selection == true && Contact_Arrow != Total_Contact)
      {
        On_Menu_Screen = true;
        Phone_Contact_Selection = false;
        Contact_Arrow = 0;
        On_Call = true;
      }

      if (SMS_Contact_Selection == true && Contact_Arrow == Total_Contact && SMS_Message_Selection == false )
      {
        On_Menu_Screen = true;
        SMS_Contact_Selection = false;
        Contact_Arrow = 0;
      }
      else if (SMS_Contact_Selection == true && Contact_Arrow != Total_Contact && SMS_Message_Selection == false)
      {

        SMS_Message_Selection = true;
        On_Menu_Screen = false;
        Message_Arrow = 0;
      }
      else if (SMS_Contact_Selection == true && Message_Arrow == Total_Message && SMS_Message_Selection == true)
      {
        SMS_Message_Selection = false;
        On_Menu_Screen = false;
        Contact_Arrow = 0;
      }
      else if (SMS_Contact_Selection == true && Message_Arrow != Total_Message && SMS_Message_Selection == true)
      {
        Trigger_SMS = true;
        On_Menu_Screen = false;
      }
    }
    else
    {
      Cut_Call = true;
    }
  }
  else
  {
    if (Incoming_Call_Connected == true)
    {
      Incoming_State = false;
      Attend_Incoming_call = false;
      Reject_Incoming_Call = false;
      Incoming_Call_Connected = false;
      SerialAT.println("ATH");
    }
  }
}

void Button_Right_Pressed()
{
  Serial.println("Button_Right_Pressed");
  Screen_Off_Timer = millis();
  if (Incoming_State == false)
  {
    if (On_Menu_Screen == true)
    {
      Menu_Screen++;
      if (Menu_Screen > Total_Menu)
      {
        Menu_Screen = 0;
      }
    }
    if (Phone_Contact_Selection == true)
    {
      Contact_Arrow++;
      if (Contact_Arrow > Total_Contact)
      {
        Contact_Arrow = 0;
      }
      Serial.println(Contact_Arrow);
    }
    if (SMS_Contact_Selection == true && SMS_Message_Selection == false)
    {
      Contact_Arrow++;
      if (Contact_Arrow > Total_Contact)
      {
        Contact_Arrow = 0;
      }
      Serial.println(Contact_Arrow);
    }
    else if (SMS_Contact_Selection == true && SMS_Message_Selection == true)
    {
      Message_Arrow++;
      if (Message_Arrow > Total_Contact)
      {
        Message_Arrow = 0;
      }
      Serial.println(Contact_Arrow);
    }
    Serial.println(Menu_Screen);
  }
  else
  {
    Reject_Incoming_Call = true;
  }
}

void Incoming_GSM()
{
  Serial.println("Incoming");
}

/*****************************************************************************/
/****                         ANALOG CLOCK                                ****/
/*****************************************************************************/

void Draw_Line_Seconds(int s) {
  float angle = s * 6 ;
  angle = (angle / 57.29577951);
  int xS = (clockCenterX + (sin(angle) * (16)));
  int yS = (clockCenterY - (cos(angle) * (16)));
  if (s == 15) {
    display.drawLine(clockCenterX, clockCenterY, xS, yS + 1, WHITE);
  } else {
    display.drawLine(clockCenterX, clockCenterY, xS, yS, WHITE);
  }
}
void Draw_Line_Minutes(int m) {
  float angle = m * 6 ;
  angle = (angle / 57.29577951) ;
  int xM = (clockCenterX + (sin(angle) * (17)));
  int yM = (clockCenterY - (cos(angle) * (17)));
  if (m == 15) {
    display.drawLine(clockCenterX, clockCenterY - 1, xM, yM + 1, WHITE);
    display.drawLine(clockCenterX - 1, clockCenterY, xM, yM + 1, WHITE);
    display.drawLine(clockCenterX, clockCenterY, xM, yM + 1, WHITE);
    display.drawLine(clockCenterX + 1, clockCenterY, xM, yM + 1, WHITE);
    display.drawLine(clockCenterX, clockCenterY + 1, xM, yM + 1, WHITE);
  } else {
    display.drawLine(clockCenterX, clockCenterY - 1, xM, yM, WHITE);
    display.drawLine(clockCenterX - 1, clockCenterY, xM, yM, WHITE);
    display.drawLine(clockCenterX, clockCenterY, xM, yM, WHITE);
    display.drawLine(clockCenterX + 1, clockCenterY, xM, yM, WHITE);
    display.drawLine(clockCenterX, clockCenterY + 1, xM, yM, WHITE);
  }
}
void Draw_Line_Hours(int h, int m) {
  float angle = h * 30 + int((m / 12) * 6);
  angle = (angle / 57.29577951) ;
  int xH = (clockCenterX + (sin(angle) * (12)));
  int yH = (clockCenterY - (cos(angle) * (12)));
  if (h == 12 && m < 12) {
    display.drawLine(clockCenterX, clockCenterY - 2, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX - 2, clockCenterY, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY - 1, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX - 1, clockCenterY, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX + 1 , clockCenterY, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY + 1, xH + 1, yH, WHITE);
    display.drawLine(clockCenterX + 2, clockCenterY, xH + 1, yH , WHITE);
    display.drawLine(clockCenterX, clockCenterY + 2, xH + 1, yH, WHITE);
  } else {
    display.drawLine(clockCenterX, clockCenterY - 2, xH, yH, WHITE);
    display.drawLine(clockCenterX - 2, clockCenterY, xH, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY - 1, xH, yH, WHITE);
    display.drawLine(clockCenterX - 1, clockCenterY, xH, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY, xH, yH, WHITE);
    display.drawLine(clockCenterX + 1 , clockCenterY, xH, yH, WHITE);
    display.drawLine(clockCenterX, clockCenterY + 1, xH, yH, WHITE);
    display.drawLine(clockCenterX + 2, clockCenterY, xH, yH , WHITE);
    display.drawLine(clockCenterX, clockCenterY + 2, xH, yH, WHITE);
  }
}

/*****************************************************************************/
/****                  WIFI CONNECTING ANIMATION                          ****/
/*****************************************************************************/

void WIFI_ANIMATION()
{
  display.clearDisplay();
  display.drawBitmap(7, 0, WIFI_Icon_1, 113, 64, WHITE);
  display.display();
  delay(300);
  display.drawBitmap(7, 0, WIFI_Icon_2, 113, 64, WHITE);
  display.display();
  delay(300);
  display.drawBitmap(7, 0, WIFI_Icon_3, 113, 64, WHITE);
  display.display();
  delay(300);

}

/*****************************************************************************/
/****                               GSM                                   ****/
/*****************************************************************************/

void GSM_DISCONNECT()
{
  Blynk_GSM.disconnect();
  delay(100);
  modem.gprsDisconnect();
  delay(2000);
  if (!modem.isGprsConnected())
  {
    GSM_CONNECT_OK = false;
  }
  else
  {
    GSM_DISCONNECT();
  }
}
void GSM_CONNECT()
{

  if (!modem.isGprsConnected())
  {
    GSM_CONNECT_OK = Blynk_GSM.connectNetwork(apn, gprsUser, gprsPass);
  }

  if (GSM_CONNECT_OK)
  {
    Blynk_GSM.connect();
  }
  else
  {
    GSM_CONNECT();
  }
}

/*****************************************************************************/
/****                            SMS                                      ****/
/*****************************************************************************/

void Send_SMS()
{
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.println("Sending...");
  display.display();
  int Response = 0;
  if (Contact_Arrow == 0)
  {
    if (Message_Arrow == 0)
    {
      Response = modem.sendSMS(Contact1_Number, Message1 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    else if (Message_Arrow == 1)
    {
      Response = modem.sendSMS(Contact1_Number, Message2 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    if (Message_Arrow == 2)
    {
      Response = modem.sendSMS(Contact1_Number, Message3 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
  }
  else if (Contact_Arrow == 1)
  {
    if (Message_Arrow == 0)
    {
      Response = modem.sendSMS(Contact2_Number, Message1 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    else if (Message_Arrow == 1)
    {
      Response = modem.sendSMS(Contact2_Number, Message2 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    if (Message_Arrow == 2)
    {
      Response = modem.sendSMS(Contact2_Number, Message3 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
  }
  else if (Contact_Arrow == 2)
  {
    if (Message_Arrow == 0)
    {
      Response = modem.sendSMS(Contact3_Number, Message1 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    else if (Message_Arrow == 1)
    {
      Response = modem.sendSMS(Contact3_Number, Message2 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
    if (Message_Arrow == 2)
    {
      Response = modem.sendSMS(Contact3_Number, Message3 + " https://www.google.com/maps/?q=" + LAT + "," + LON);
    }
  }
  delay(500);
  Serial.println(Response);
  if (Response)
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("Sending...");
    display.println(" ");
    display.println("  Done");
    display.display();
    Serial.println("done");
  }
  else
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("Sending...");
    display.println(" ");
    display.println(" Failed");
    display.display();
    Serial.println("failed");
  }
  //IF WIFI IS NOT CONNECTED THEN SEND THE GSM LOCATION
  if (!Blynk_WF.connected())
  {
    if (Contact_Arrow == 0)
    {
      if (Message_Arrow == 0)
      {
        Response = modem.sendSMS(Contact1_Number, Message1 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      else if (Message_Arrow == 1)
      {
        Response = modem.sendSMS(Contact1_Number, Message2 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      if (Message_Arrow == 2)
      {
        Response = modem.sendSMS(Contact1_Number, Message3 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
    }
    else if (Contact_Arrow == 1)
    {
      if (Message_Arrow == 0)
      {
        Response = modem.sendSMS(Contact2_Number, Message1 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      else if (Message_Arrow == 1)
      {
        Response = modem.sendSMS(Contact2_Number, Message2 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      if (Message_Arrow == 2)
      {
        Response = modem.sendSMS(Contact2_Number, Message3 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
    }
    else if (Contact_Arrow == 2)
    {
      if (Message_Arrow == 0)
      {
        Response = modem.sendSMS(Contact3_Number, Message1 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      else if (Message_Arrow == 1)
      {
        Response = modem.sendSMS(Contact3_Number, Message2 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
      if (Message_Arrow == 2)
      {
        Response = modem.sendSMS(Contact3_Number, Message3 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      }
    }
    delay(500);
    Serial.println(Response);
    if (Response)
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(2);
      display.println("Sending...");
      display.println(" ");
      display.println("  Done");
      display.display();
      Serial.println("done");
    }
    else
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(2);
      display.println("Sending...");
      display.println(" ");
      display.println(" Failed");
      display.display();
      Serial.println("failed");
    }
  }
  delay(1000);
}

/*****************************************************************************/
/****                      MENU SCREEN LOG                                ****/
/*****************************************************************************/

void Menu_Screen_update()
{
  if (On_Menu_Screen == true)
  {

    if (Menu_Screen == 0)
    {
      //home
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(32, 1, Home_Menu_Screen, 65, 62, WHITE);
      display.display();
    }
    else if (Menu_Screen == 1)
    {
      //location
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(34, 3, Location_Menu_Screen, 60, 58, WHITE);
      display.display();
    }
    else if (Menu_Screen == 2)
    {
      //Step_Count
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(35, 5);
      display.println("Step Count");
      display.drawBitmap(39, 13, Steps_Menu_Screen, 50, 50, WHITE);
      display.display();
    }
    else if (Menu_Screen == 3)
    {
      //Weather
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(33, 1, Weather_Menu_Screen, 62, 62, WHITE);
      display.display();
    }
    else if (Menu_Screen == 4)
    {
      //Call
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(25, 1, Phone_Menu_Screen, 79, 62, WHITE);
      display.display();
    }
    else if (Menu_Screen == 5)
    {
      //SMS
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(19, 1, Message_Menu_Screen, 90, 62, WHITE);
      display.display();
    }
    else if (Menu_Screen == 6)
    {
      //Battery
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(34, 1, Battery_Menu_Screen, 60, 62, WHITE);
      display.display();
    }
    else if (Menu_Screen == 7)
    {
      //GSM_Location
      display.clearDisplay();
      display.drawRoundRect(14, 0, 100, 64, 8, WHITE);
      display.drawBitmap(40, 1, GSM_Location_Menu_Screen, 48, 62, WHITE);
      display.display();
    }
  }
}

/*****************************************************************************/
/****                     HOME SCREEN                                     ****/
/*****************************************************************************/

void Home_Screen()
{
  display.clearDisplay();
  char buffer [16];
  uint8_t thisSec, thisMin, thisHour;
  thisSec = second();
  thisMin =  minute();
  thisHour = hour() % 12;
  if (thisHour == 0)
  {
    thisHour = 12;
  }
  /*================ANALOG_CLOCK_HOME============== */
  display.drawBitmap(0, 0, Clock_Frame, 63, 63, WHITE);
  Draw_Line_Seconds( thisSec);
  Draw_Line_Minutes(thisMin);
  Draw_Line_Hours(thisHour, thisMin);
  display.drawCircle(31, 31, 3, BLACK);
  /*================BATTERY_HOME============== */
  display.drawRect(105, 0, 16, 8, WHITE);
  display.fillRect(121, 2, 3, 4, WHITE);
  if (millis() - Battery_Calculation_Timer > 30000)
  {
    Battery_Voltage_Measure();
    Battery_Calculation_Timer = millis();
  }
  if (Battery_Percentage < 0)
  {
    Battery_Percentage = 0;
  }
  display.fillRect(108, 2, (Battery_Percentage / 10), 4, WHITE);

  /*================================ WIFI_HOME==================================*/
  if (Blynk_WF.connected()) {
    int wifi_rssi = (WiFi.RSSI()) * (-1);
    if (wifi_rssi >= 80)
    {
      display.drawBitmap(85, 0, WIFI_1, 13, 10, WHITE);
    }
    if (wifi_rssi >= 70 && wifi_rssi < 80)
    {
      display.drawBitmap(85, 0, WIFI_2, 13, 10, WHITE);;
    }
    if (wifi_rssi >= 67 && wifi_rssi < 70)
    {
      display.drawBitmap(85, 0, WIFI_3, 13, 10, WHITE);
    }
    if (wifi_rssi >= 10 && wifi_rssi < 67)
    {
      display.drawBitmap(85, 0, WIFI_4, 13, 10, WHITE);
    }
  }
  else
  {
    display.setCursor(85, 0);
    display.setTextSize(1);
    display.print("x");
  }
  /*=======================Tower================*/
  display.drawBitmap(55, 0, TOWER_HOME, 13, 10, WHITE);
  if (millis() - Tower_Calculation_Timer > 60000)
  {
    csq = modem.getSignalQuality();
    Tower_Calculation_Timer = millis();
  }
  if (csq > 23 && csq < 32)
  {
    display.drawRect(66, 8, 2, 2, WHITE);
    display.drawRect(69, 6, 2, 4, WHITE);
    display.drawRect(72, 4, 2, 6, WHITE);
    display.drawRect(75, 2, 2, 8, WHITE);
  }
  else if (csq > 15 && csq < 24)
  {
    display.drawRect(66, 8, 2, 2, WHITE);
    display.drawRect(69, 6, 2, 4, WHITE);
    display.drawRect(72, 4, 2, 6, WHITE);
  }
  else if (csq > 9 && csq < 16)
  {
    display.drawRect(66, 8, 2, 2, WHITE);
    display.drawRect(69, 6, 2, 4, WHITE);
  }
  else if (csq >= 0 && csq < 8)
  {
    display.drawRect(66, 8, 2, 2, WHITE);
  }
  else
  {
    display.setCursor(66, 2);
    display.setTextSize(1);
    display.print("o");
  }
  if (GSM_CONNECT_OK)
  {
    display.setCursor(76, 0);
    display.setTextSize(1);
    display.print("e");
  }

  /*================Display Time================*/

  sprintf (buffer, "%02d:%02d", thisHour, thisMin);
  display.setCursor(68, 24);
  display.setTextSize(2);
  display.print(buffer);
  display.setTextSize(1);
  display.setCursor(66, 13);
  if (hour() >= 13)
  {
    display.print("PM");
  }
  else
  {
    display.print("AM");
  }
  /*============Display Date=================*/
  display.setCursor(59, 56);
  String day_day = dayStr(weekday());
  day_day.toUpperCase();
  display.print(day_day);
  char currentDate [16];
  uint8_t thisDay, thisMonth ;
  thisDay = day();
  thisMonth =  month();
  sprintf (currentDate, "%02d/%02d/", thisDay, thisMonth); //add leading zeros to the day and month
  display.setTextSize(1);
  display.setCursor(66, 45);
  display.print(currentDate);
  display.setTextSize(1);
  display.setCursor(100, 45);
  display.print(year(), DEC);
  /*================Display Temperature================*/
  display.setCursor(95, 13);
  display.println(bmp.readTemperature(), 1);
  display.setCursor(120, 13);
  display.println("C");
  display.display();
}

/*****************************************************************************/
/****                    LOCATION SCREEN                                  ****/
/*****************************************************************************/

void Location_Screen()
{
  display.clearDisplay();
  display.setCursor(40, 0);
  display.setTextSize(1);
  display.println("LATITUDE");

  display.setCursor(0, 15);
  display.setTextSize(2);
  display.println(LAT);

  display.setCursor(30, 37);
  display.setTextSize(1);
  display.println(" LONGITUDE");

  display.setCursor(0, 50);
  display.setTextSize(2);
  display.println(LON);
  display.display();
}

/*****************************************************************************/
/****                     STEPS SCREEN                                    ****/
/*****************************************************************************/

void Steps_Screen()
{
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.println("STEPS:");
  display.setCursor(40, 10);
  display.setTextSize(2);
  display.println(steps);
  display.setTextSize(1);
  display.println("DISTANCE:");
  display.setTextSize(2);
  display.setCursor(0, 40);
  display.println(distance);
  display.setCursor(70, 40);
  display.println(" mts");
  display.display();
}

/*****************************************************************************/
/****                     WEATHER SCREEN                                  ****/
/*****************************************************************************/

void Weather_Screen()
{
  if (millis() - Weather_Screen_Update_Timer > 2000)
  {

    Weather_Screen_Update++;

    if (Weather_Screen_Update > 2)
    {
      Weather_Screen_Update = 0;
    }
    Weather_Screen_Update_Timer = millis();
  }
  if (Weather_Screen_Update == 0)
  {
    //temperature
    display.clearDisplay();
    display.drawBitmap(0, 5, Temperature_Icon, 50, 50, WHITE);
    display.setTextSize(1);
    display.setCursor(50, 0);
    display.println("TEMPERATURE");
    display.setTextSize(2);
    display.setCursor(55, 20);
    display.println(bmp.readTemperature());
    display.setCursor(70, 45);
    display.setTextSize(1);
    display.println("o");
    display.setTextSize(2);
    display.setCursor(80, 45);
    display.println("C");
    display.display();
    Serial.print(F("Temperature = "));
    Serial.print(bmp.readTemperature());
    Serial.println(" *C");
    Serial.println();
  }
  else if (Weather_Screen_Update == 1)
  {
    //pressure
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(60, 0);
    display.println("PRESSURE");
    display.setTextSize(2);
    display.setCursor(50, 20);
    display.println(bmp.readPressure() / 100, 1);
    display.setCursor(70, 45);
    display.setTextSize(2);
    display.println("hPa");
    display.drawBitmap(0, 5, Pressure_Icon, 50, 50, WHITE);
    display.display();
    Serial.print(F("Pressure = "));
    Serial.print(bmp.readPressure());
    Serial.println(" Pa");
    Serial.println();
  }
  else if (Weather_Screen_Update == 2)
  {
    //altitude
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(60, 0);
    display.println("ALTITUDE");
    display.setTextSize(2);
    display.setCursor(60, 20);
    display.println(bmp.readAltitude(1015.65));
    display.setCursor(70, 45);
    display.setTextSize(2);
    display.println("mts");
    display.drawBitmap(0, 5, Mountain_Icon, 50, 50, WHITE);
    display.display();
    Serial.print(F("Approx altitude = "));
    Serial.print(bmp.readAltitude(1015.65)); /* Adjusted to local forecast! */
    Serial.println(" m");
    Serial.println();
  }
}

/*****************************************************************************/
/****                        PHONE SCREEN                                 ****/
/*****************************************************************************/

void Phone_Screen()
{

  Phone_Contact_Selection = true;
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.println("Contacts");
  display.println("  " + Contact1);
  display.println("  " + Contact2);
  display.println("  " + Contact3);
  if (Contact_Arrow < 3)
  {
    if (Contact_Arrow == 0)
    {
      display.setCursor(0, 16);
      display.println(">");
    }
    else if (Contact_Arrow == 1)
    {
      display.setCursor(0, 32);
      display.println(">");
    }
    else if (Contact_Arrow == 2)
    {
      display.setCursor(0, 48);
      display.println(">");
    }
  }
  else
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("> back to   menu");
  }
  display.display();
}

/*****************************************************************************/
/****                      SMS SCREEN                                     ****/
/*****************************************************************************/

void SMS_Screen()
{

  SMS_Contact_Selection = true;
  if (SMS_Contact_Selection == true && SMS_Message_Selection == false)
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("Contacts");
    display.println("  " + Contact1);
    display.println("  " + Contact2);
    display.println("  " + Contact3);
    if (Contact_Arrow < 3)
    {
      if (Contact_Arrow == 0)
      {
        display.setCursor(0, 16);
        display.println(">");
      }
      else if (Contact_Arrow == 1)
      {
        display.setCursor(0, 32);
        display.println(">");
      }
      else if (Contact_Arrow == 2)
      {
        display.setCursor(0, 48);
        display.println(">");
      }
    }
    else
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.print("> back to   menu");
    }
    display.display();
  }
  else if (SMS_Contact_Selection == true && SMS_Message_Selection == true)
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("  MESSAGE");
    display.println(" " + Message1);
    display.println(" " + Message2);
    if (Message_Arrow < 2)
    {
      if (Message_Arrow == 0)
      {
        display.setCursor(0, 16);
        display.println(">");
      }
      else if (Message_Arrow == 1)
      {
        display.setCursor(0, 48);
        display.println(">");
      }
    }
    else
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println(" " + Message3);
      display.setCursor(0, 32);
      display.print(" back to    contacts");
      if (Message_Arrow == 2)
      {
        display.setCursor(0, 0);
        display.println(">");
      }
      else
      {
        display.setCursor(0, 32);
        display.println(">");
      }
    }
    display.display();

  }
  if (Trigger_SMS == true)
  {
    Send_SMS();
    SMS_Contact_Selection = false;
    SMS_Message_Selection = false;
    On_Menu_Screen = true;
    Contact_Arrow = 0;
    Message_Arrow = 0;
    Trigger_SMS = false;
  }
}

/*****************************************************************************/
/****                      BATTERY SCREEN                                 ****/
/*****************************************************************************/

void Battery_Screen()
{
  if (millis() - Battery_Calculation_Timer > 30000)
  {
    Battery_Voltage_Measure();
    Battery_Calculation_Timer = millis();
  }
  if (Battery_Percentage < 0)
  {
    Battery_Percentage = 0;
  }
  display.clearDisplay();
  display.setCursor(0, 0);
  display.drawRect(27, 10, 64, 25, WHITE);
  display.fillRect(91, 17, 4, 10, WHITE);
  if (Battery_Percentage >= 75)
  {
    display.fillRect(30, 12, 14, 20, WHITE);
    display.fillRect(45, 12, 14, 20, WHITE);
    display.fillRect(60, 12, 14, 20, WHITE);
    display.fillRect(75, 12, ((Battery_Percentage - 75) / 2), 20, WHITE);
  }
  else if (Battery_Percentage >= 50)
  {
    display.fillRect(30, 12, 14, 20, WHITE);
    display.fillRect(45, 12, 14, 20, WHITE);
    display.fillRect(60, 12, ((Battery_Percentage - 50) / 2), 20, WHITE);
  }
  else if (Battery_Percentage >= 25)
  {
    display.fillRect(30, 12, 14, 20, WHITE);
    display.fillRect(45, 12, ((Battery_Percentage - 25) / 2), 20, WHITE);
  }
  else
  {
    display.fillRect(30, 12, (Battery_Percentage / 2), 20, WHITE);
  }
  display.setCursor(0, 47);
  display.setTextSize(2);
  if (Battery_Voltage < 0)
  {
    display.print(0.00);
  }
  else
  {
    display.print(Battery_Voltage);
  }
  display.print("v ");
  display.print(Battery_Percentage);
  display.print("%");
  display.display();
}

/*****************************************************************************/
/****                         GSM SCREEN                                  ****/
/*****************************************************************************/

void GSM_Location_Screen()
{
  if (GSM_CONNECT_OK)
  {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println("LATITUDE: ");
    display.println(String(GSM_Lat, 8));
    display.println(" ");
    display.println("LONGITUDE: ");
    display.println(String(GSM_Lon, 8));
    display.println(" ");
    display.println("Acccuracy ");
    display.println(GSM_Accuracy);
    display.display();
  }
  else
  {
    Serial.println("Running in wifi");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("  Running ");
    display.setCursor(0, 20);
    display.println("    In");
    display.setCursor(0, 40);
    display.println("   WIFI");
    display.display();
  }
}


/*****************************************************************************/
/****                         MENU SCREEN                                 ****/
/*****************************************************************************/

void Inside_Menu_Screen()
{
  if (On_Menu_Screen == false)
  {
    if (Menu_Screen == 0)
    {
      Home_Screen();
    }
    else if (Menu_Screen == 1)
    {
      Location_Screen();
    }
    else if (Menu_Screen == 2)
    {
      Steps_Screen();
    }
    else if (Menu_Screen == 3)
    {
      Weather_Screen();

    }
    else if (Menu_Screen == 4)
    {
      Phone_Screen();
    }
    else if (Menu_Screen == 5)
    {
      SMS_Screen();
    }
    else if (Menu_Screen == 6)
    {
      Battery_Screen();
    }
    else if (Menu_Screen == 7)
    {
      GSM_Location_Screen();
    }
  }
}

/*****************************************************************************/
/****                           SETUP                                     ****/
/*****************************************************************************/

void setup()
{
  Serial.begin(115200);
  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  bmp.begin(0x76, 0x58);
  mpu6050.begin();
  Wire.begin(21, 22);
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(35, 20);
  display.println("BOOTING...");
  display.drawRoundRect(0, 32, 128, 20, 8, WHITE);
  display.display();
  
  mpu6050.calcGyroOffsets(true);
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
                  
  Button_Left.begin();
  Button_Center.begin();
  Button_Right.begin();
  Incoming.begin();
  Button_Left.onPressed(Button_Left_Pressed);
  Button_Center.onPressed(Button_Center_Pressed);
  Button_Right.onPressed(Button_Right_Pressed);
  Incoming.onPressed(Incoming_GSM);
  Button_Center.onSequence(3, 1500, sequenceEllapsed);
  if (Button_Left.supportsInterrupt())
  {
    Button_Left.enableInterrupt(Button_Left_ISR);
  }
  if (Button_Center.supportsInterrupt())
  {
    Button_Center.enableInterrupt(Button_Center_ISR);
  }
  if (Button_Right.supportsInterrupt())
  {
    Button_Right.enableInterrupt(Button_Right_ISR);
  }
  if (Incoming.supportsInterrupt())
  {
    Incoming.enableInterrupt(Incoming_ISR);
    Serial.println("incoming interupt");
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(35, 20);
  display.println("BOOTING...");
  display.fillRoundRect(4, 35, 64, 14, 4, WHITE);
  display.drawRoundRect(0, 32, 128, 20, 8, WHITE);
  display.display();
  Serial.println("Initializing modem...");

  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);

  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);
  
  digitalWrite(MODEM_PWKEY, HIGH);
  delay(2000);
  digitalWrite(MODEM_PWKEY, LOW);
  
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  
  WIFI_ANIMATION();
  Blynk_WF.begin(wifi_blynk_tok, ssid, pass, blynk_server, BLYNK_HARDWARE_PORT);
  
  display.clearDisplay();
  display.setCursor(35, 20);
  display.println("BOOTING...");
  display.fillRoundRect(4, 35, 64, 14, 4, WHITE);
  display.fillRoundRect(4, 35, 119, 14, 4, WHITE);
  display.display();
  
  Battery_Voltage_Measure();
  
  Blynk_GSM.config(modem, gsm_blynk_tok);
  SerialAT.println("AT+CGEREP=0");
  delay(100);
  SerialAT.println("AT+CLVL=100");
  delay(100);
  SerialAT.println("AT+CLVL=100");
  delay(100);
  SerialAT.println("AT+CFUN=1");
  delay(100);
  
  display.clearDisplay();
  display.display();
  
  Screen_Off_Timer = millis();
}

/*****************************************************************************/
/****                          LOOP                                       ****/
/*****************************************************************************/
void loop()
{
  if (Emergency_Status == false && Incoming_State == false)
  {
    
    if (On_Call == false)
    {
      if (!Sleep_Status)
      {
        Menu_Screen_update();
        Inside_Menu_Screen();
      }
      else
      {
        display.clearDisplay();
        display.display();
      }
      mpu6050.update();
      if (mpu6050.getAccY() > 1)
      {
        steps += 1;
      }
      if (mpu6050.getAccZ() > 1)
      {
        Screen_Off_Timer = millis();
      }
      distance = steps * distanceinonestep / 100;

      if (Blynk_WF.connected())
      {
        Blynk_WF.run();
        Blynk_WF.virtualWrite(V8, Battery_Percentage);
        Blynk_WF.virtualWrite(V9, steps);
        Blynk_WF.virtualWrite(V10, bmp.readTemperature() );
        Network_Connection_Timer = millis();
        if (GSM_CONNECT_OK)
        {
          GSM_DISCONNECT();
        }
      }
      else
      {
        if (millis() - Wifi_Reconnect_Timer > 12000)
        {
          WiFi.scanNetworks(true);
          Serial.print("\nScan start ... ");
          Wifi_Reconnect_Timer = millis();
        }
        int n = WiFi.scanComplete();
        if (n >= 0)
        {
          Serial.printf("%d network(s) found\n", n);
          for (int i = 0; i < n; i++)
          {
            if (WiFi.SSID(i) == ssid)
            {
              Serial.println(" networks found");
              WiFi.begin(ssid, pass);
              while (!Blynk_WF.connected())
              {
                WIFI_ANIMATION();
                Blynk_WF.connect();
              }
            }
          }
          WiFi.scanDelete();
        }
        if (millis() - Network_Connection_Timer > 30000)
        {
          if (!GSM_CONNECT_OK)
          {
            Blynk_WF.disconnect();
            display.clearDisplay();
            display.drawBitmap(32, 0, Internet_Icon, 64, 64, WHITE);
            display.display();
            GSM_CONNECT();
          }
          Network_Connection_Timer = millis();
        }
      }
      if (GSM_CONNECT_OK)
      {
        Blynk_GSM.run();
        if (millis() - GSM_Battery_Timer > 60000)
        {
          bridge1.virtualWrite(V8, Battery_Percentage);
          GSM_Battery_Timer = millis();
        }
        if (millis() - GSM_Location_Upload_Timer > 120000) //120000
        {
          Get_Gsm_Location();
          Blynk_GSM.virtualWrite(V0, Point_Index, GSM_Lat, GSM_Lon, "GSM");
          Point_Index++;
          if (Point_Index > 144)
          {
            Point_Index = 1;
          }
          GSM_Location_Upload_Timer = millis();
        }
      }
    }
    else
    {
      bool Response = false;
      if (Contact_Arrow == 0)
      {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.setTextSize(2);
        display.print("  CALLING  ");
        display.println(" ");
        display.println(Contact1);
        display.display();
        Response = modem.callNumber(Contact1_Number);
      }
      else if (Contact_Arrow == 1)
      {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.setTextSize(2);
        display.print("  CALLING  ");
        display.println(" ");
        display.println(Contact2);
        display.display();
        Response = modem.callNumber(Contact2_Number);
      }
      else if (Contact_Arrow == 2)
      {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.setTextSize(2);
        display.print("  CALLING  ");
        display.println(" ");
        display.println(Contact3);
        display.display();
        Response = modem.callNumber(Contact3_Number);
      }
      delay(1000);
      if (!Response)
      {
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println(" CALLING  ");
        display.println("          ");
        display.println(" Failed");
        display.display();
        delay(1000);
        On_Call = false;
      }
      else
      {
        int callSec;
        int currentSec;
        int differenceSec;
        int printmin;
        int printsec;
        char buffer1 [16];
        callSec =  minute() * 60 + second();
        while (!Cut_Call)
        {

          SerialAT.print (F("AT+CPAS\r\n"));
          String input = SerialAT.readString();
          int output_ = input.substring(input.indexOf("+CPAS: ") + 7, input.indexOf("+CPAS: ") + 9).toInt();
          Serial.println(output_);
          if (output_ == 4)
          {
            currentSec = minute() * 60 + second();
            differenceSec = currentSec - callSec;
            printmin = differenceSec % 60;
            printsec = differenceSec / 60;
            display.clearDisplay();
            display.setCursor(0, 0);
            display.println(" Connected");
            display.println("          ");
            sprintf (buffer1, "  %02d:%02d", printsec, printmin);
            display.println(buffer1);
            display.display();
          }
          else if (output_ == 3)
          {
            display.clearDisplay();
            display.setCursor(0, 0);
            display.println("RINGING..");
            display.display();
          }
          else if (output_ == 0)
          {
            Serial.println("call end");
            display.clearDisplay();
            display.setCursor(0, 0);
            display.setTextSize(2);
            display.print("   CALL   ");
            display.println("          ");
            display.println("   END    ");
            display.display();
            Cut_Call = false;
            On_Call = false;
            break;
          }
          else
          {
            display.clearDisplay();
            display.setCursor(0, 0);
            display.println(" CALLING  ");
            display.println("          ");
            display.println(" Failed");
            display.display();
            delay(1000);
            Cut_Call = false;
            On_Call = false;
            break;
          }
          delay(100);
        }
        modem.callHangup();
        delay(1000);
        Serial.println("call end");
        display.clearDisplay();
        display.setCursor(0, 0);
        display.setTextSize(2);
        display.print("   CALL   ");
        display.println("          ");
        display.println("   END    ");
        display.display();
        delay(1000);
        Cut_Call = false;
        On_Call = false;
      }
      On_Call = false;
      On_Menu_Screen = true;
    }
  }
  
  else if (Emergency_Status == false && Incoming_State == true)
  {
    
    Screen_Off_Timer = millis();
    if (Attend_Incoming_call == false && Reject_Incoming_Call == false)
    {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(2);
      display.print(" INCOMING ");
      display.println("   CALL   ");
      String Incoming_Number;
      Incoming_Number = Update_Phone_Number();
      if (Incoming_Number.length() == 10)
      {
        
        display.println(Incoming_Number);
        display.setCursor(0, 56);
        display.setTextSize(1);
        display.println("ANSWER         REJECT");
        display.display();
        Serial.println(Incoming_Number);
      }
      Incoming_Call_Connected = false;
    }
    
    else if (Attend_Incoming_call == true && Reject_Incoming_Call == false)
    {
      
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(2);
      display.print("   CALL   ");
      display.println("  ");
      display.println("CONNECTED ");
      display.display();
      if (Incoming_Call_Connected == false)
      {
        SerialAT.println("ATA");
        Incoming_Call_Connected = true;
      }
      else
      {
        
        SerialAT.print (F("AT+CPAS\r\n"));
        String input = SerialAT.readString();
        int output_ = input.substring(input.indexOf("+CPAS: ") + 7, input.indexOf("+CPAS: ") + 9).toInt();
        Serial.println(output_);
        if (output_ == 0)
        {
          
          display.clearDisplay();
          display.setCursor(0, 0);
          display.setTextSize(2);
          display.print("   CALL   ");
          display.println("  ");
          display.println("   ENDED  ");
          display.display();
          delay(300);
          Attend_Incoming_call = false;
          Reject_Incoming_Call = false;
          Incoming_Call_Connected = false;
          Incoming_State = false;
        }
      }
    }
    else if (Attend_Incoming_call == false && Reject_Incoming_Call == true)
    {
      
      Screen_Off_Timer = millis();
      //rejectcall
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(2);
      display.print(" REJECTED ");
      display.println(" ");
      display.println("   CALL   ");
      display.display();
      delay(300);
      SerialAT.println("ATH");
      Attend_Incoming_call = false;
      Reject_Incoming_Call = false;
      Incoming_Call_Connected = false;
    }
  }
  
  else
  {
    
    Screen_Off_Timer = millis();
    bool Response;
    Serial.println("Updating emergency");
    Serial.println(" ");
    Serial.println(" ");
    Serial.println("Sharing location: ");
    Serial.print(Contact1);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("ALERT SMS");
    display.println(Contact1);
    display.display();
    Response = modem.sendSMS(Contact1_Number, Message4 + "https://www.google.com/maps/?q=" + LAT + "," + LON);
    Serial.println(" ");
    Serial.println(" ");
    Serial.println("Sharing location: ");
    Serial.print(Contact2);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("ALERT SMS");
    display.println(Contact2);
    display.display();
    Response = modem.sendSMS(Contact2_Number, Message4 + "https://www.google.com/maps/?q=" + LAT + "," + LON);
    Serial.println(" ");
    Serial.println(" ");
    Serial.println("Sharing location: ");
    Serial.print(Contact3);
    Response = modem.sendSMS(Contact3_Number, Message4 + "https://www.google.com/maps/?q=" + LAT + "," + LON);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("ALERT SMS");
    display.println(Contact3);
    display.display();
    
    if (!Blynk_WF.connected())
    {
      //sharing gsm location
      Serial.println("Sharing GSM location: ");
      Serial.print(Contact1);
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(1);
      display.println("GSM LOCATION");
      display.println(Contact1);
      display.display();
      Response = modem.sendSMS(Contact1_Number, Message4 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      Serial.println("Sharing GSM location: ");
      Serial.print(Contact2);
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(1);
      display.println("GSM LOCATION");
      display.println(Contact2);
      display.display();
      Response = modem.sendSMS(Contact2_Number, Message4 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
      Serial.println("Sharing GSM location: ");
      Serial.print(Contact3);
      display.clearDisplay();
      display.setCursor(0, 0);
      display.setTextSize(1);
      display.println("GSM LOCATION");
      display.println(Contact3);
      display.display();
      Response = modem.sendSMS(Contact3_Number, Message4 + "GSM LOCATION ACCURACY" + String(GSM_Accuracy) + "https://www.google.com/maps/?q=" + String(GSM_Lat, 8) + "," + String(GSM_Lon, 8));
    }
    
    Serial.println(" ");
    Serial.println(" ");
    Serial.println("Calling 112");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("CALLING");
    display.println("112");
    display.display();

    /*
       UPDATE CALLING
       //IT IS ILLEGAL TO CALL 112 FOR TESTING
       //IN REAL TIME UNCOMMENT THE CALLING LINE
       // Response= modem.callNumber("+91112");
    */

    delay(5000);
    Emergency_Status = false;
  }
  
  if (millis() - Screen_Off_Timer > 60000)
  {
    Sleep_Status = true;
  }
  else
  {
    Sleep_Status = false;
  }
  
}

/*****************************************************************************/
/****             GETTING PHONE NUMBER-INCOMING CALL                      ****/
/*****************************************************************************/

String Update_Phone_Number()
{
  String result;
  while (SerialAT.available()) {
    char c = SerialAT.read();
    result += c;  
  }
  return (result.substring(result.indexOf("1") + 1, result.indexOf("1") + 11));
}
